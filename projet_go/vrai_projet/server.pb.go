// Code generated by protoc-gen-go. DO NOT EDIT.
// source: server.proto

package server

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type MsgEnvoye struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MsgEnvoye) Reset()         { *m = MsgEnvoye{} }
func (m *MsgEnvoye) String() string { return proto.CompactTextString(m) }
func (*MsgEnvoye) ProtoMessage()    {}
func (*MsgEnvoye) Descriptor() ([]byte, []int) {
	return fileDescriptor_server_b930fb671f583f8d, []int{0}
}
func (m *MsgEnvoye) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MsgEnvoye.Unmarshal(m, b)
}
func (m *MsgEnvoye) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MsgEnvoye.Marshal(b, m, deterministic)
}
func (dst *MsgEnvoye) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgEnvoye.Merge(dst, src)
}
func (m *MsgEnvoye) XXX_Size() int {
	return xxx_messageInfo_MsgEnvoye.Size(m)
}
func (m *MsgEnvoye) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgEnvoye.DiscardUnknown(m)
}

var xxx_messageInfo_MsgEnvoye proto.InternalMessageInfo

func (m *MsgEnvoye) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type Reponse struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Reponse) Reset()         { *m = Reponse{} }
func (m *Reponse) String() string { return proto.CompactTextString(m) }
func (*Reponse) ProtoMessage()    {}
func (*Reponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_server_b930fb671f583f8d, []int{1}
}
func (m *Reponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Reponse.Unmarshal(m, b)
}
func (m *Reponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Reponse.Marshal(b, m, deterministic)
}
func (dst *Reponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Reponse.Merge(dst, src)
}
func (m *Reponse) XXX_Size() int {
	return xxx_messageInfo_Reponse.Size(m)
}
func (m *Reponse) XXX_DiscardUnknown() {
	xxx_messageInfo_Reponse.DiscardUnknown(m)
}

var xxx_messageInfo_Reponse proto.InternalMessageInfo

func (m *Reponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func init() {
	proto.RegisterType((*MsgEnvoye)(nil), "msgEnvoye")
	proto.RegisterType((*Reponse)(nil), "reponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RepondreClient is the client API for Repondre service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RepondreClient interface {
	Repondre(ctx context.Context, in *MsgEnvoye, opts ...grpc.CallOption) (*Reponse, error)
}

type repondreClient struct {
	cc *grpc.ClientConn
}

func NewRepondreClient(cc *grpc.ClientConn) RepondreClient {
	return &repondreClient{cc}
}

func (c *repondreClient) Repondre(ctx context.Context, in *MsgEnvoye, opts ...grpc.CallOption) (*Reponse, error) {
	out := new(Reponse)
	err := c.cc.Invoke(ctx, "/Repondre/Repondre", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RepondreServer is the server API for Repondre service.
type RepondreServer interface {
	Repondre(context.Context, *MsgEnvoye) (*Reponse, error)
}

func RegisterRepondreServer(s *grpc.Server, srv RepondreServer) {
	s.RegisterService(&_Repondre_serviceDesc, srv)
}

func _Repondre_Repondre_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgEnvoye)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepondreServer).Repondre(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Repondre/Repondre",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepondreServer).Repondre(ctx, req.(*MsgEnvoye))
	}
	return interceptor(ctx, in, info, handler)
}

var _Repondre_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Repondre",
	HandlerType: (*RepondreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Repondre",
			Handler:    _Repondre_Repondre_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "server.proto",
}

func init() { proto.RegisterFile("server.proto", fileDescriptor_server_b930fb671f583f8d) }

var fileDescriptor_server_b930fb671f583f8d = []byte{
	// 110 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x29, 0x4e, 0x2d, 0x2a,
	0x4b, 0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x57, 0x92, 0xe7, 0xe2, 0xcc, 0x2d, 0x4e, 0x77,
	0xcd, 0x2b, 0xcb, 0xaf, 0x4c, 0x15, 0x12, 0xe2, 0x62, 0xc9, 0x4b, 0xcc, 0x4d, 0x95, 0x60, 0x54,
	0x60, 0xd4, 0xe0, 0x0c, 0x02, 0xb3, 0x95, 0x64, 0xb9, 0xd8, 0x8b, 0x52, 0x0b, 0xf2, 0xf3, 0x8a,
	0xb1, 0x4a, 0x1b, 0xe9, 0x71, 0x71, 0x04, 0x81, 0xa4, 0x53, 0x8a, 0x52, 0x85, 0x94, 0x90, 0xd8,
	0x5c, 0x7a, 0x70, 0x63, 0xa5, 0x38, 0xf4, 0xa0, 0x26, 0x28, 0x31, 0x24, 0xb1, 0x81, 0xad, 0x35,
	0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0x60, 0xdb, 0xed, 0xf4, 0x86, 0x00, 0x00, 0x00,
}
